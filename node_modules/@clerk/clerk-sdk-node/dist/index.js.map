{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;AAEA,uEAA+B;AAE/B,MAAM,iBAAiB,GAAG,kBAAK,CAAC,WAAW,EAAE,CAAC;AAC9C,MAAM,oBAAoB,GAAG,iBAAiB,CAAC,oBAAoB,CAAC;AAalE,oDAAoB;AAZtB,MAAM,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC;AAaxC,0BAAO;AAZT,MAAM,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC;AAatC,wBAAM;AAZR,MAAM,WAAW,GAAG,iBAAiB,CAAC,WAAW,CAAC;AAahD,kCAAW;AAZb,MAAM,QAAQ,GAAG,iBAAiB,CAAC,QAAQ,CAAC;AAa1C,4BAAQ;AAZV,MAAM,WAAW,GAAG,iBAAiB,CAAC,WAAW,CAAC;AAahD,kCAAW;AAZb,MAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC;AAapC,sBAAK;AAXP,6EAA6E;AAC7E,kBAAe,iBAAiB,CAAC;AAajC,mBAAmB;AACnB,uCAcoB;AAZlB,+GAAA,mBAAmB,OAAA;AACnB,kGAAA,MAAM,OAAA;AACN,iGAAA,KAAK,OAAA;AACL,wGAAA,YAAY,OAAA;AACZ,2GAAA,eAAe,OAAA;AACf,8GAAA,kBAAkB,OAAA;AAClB,sGAAA,UAAU,OAAA;AACV,uGAAA,WAAW,OAAA;AAEX,sGAAA,UAAU,OAAA;AACV,gGAAA,IAAI,OAAA;AACJ,wGAAA,YAAY,OAAA;AAGd,8BAA8B;AAC9B,MAAM,uBAAuB,GAC3B,iBAAiB,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAM7D,0DAAuB;AALzB,MAAM,0BAA0B,GAC9B,iBAAiB,CAAC,qBAAqB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAKhE,gEAA0B;AAJ5B,MAAM,WAAW,GAAG,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAKxE,kCAAW;AAJb,MAAM,cAAc,GAAG,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAK9E,wCAAc;AAWhB,gBAAgB;AAChB,yCAIwB;AAHtB,mGAAA,SAAS,OAAA;AACT,0GAAA,gBAAgB,OAAA;AAIlB,gBAAgB;AAChB,yCAAmD;AAA1C,8HAAA,OAAO,OAAU;AAE1B,oDAAoD;AACpD,uDAAuD;AAEvD,SAAgB,cAAc,CAAC,KAAa;IAC1C,kBAAK,CAAC,WAAW,EAAE,CAAC,MAAM,GAAG,KAAK,CAAC;AACrC,CAAC;AAFD,wCAEC;AAED,SAAgB,oBAAoB,CAAC,KAAa;IAChD,kBAAK,CAAC,WAAW,EAAE,CAAC,YAAY,GAAG,KAAK,CAAC;AAC3C,CAAC;AAFD,oDAEC;AAED,SAAgB,kBAAkB,CAAC,KAAa;IAC9C,kBAAK,CAAC,WAAW,EAAE,CAAC,UAAU,GAAG,KAAK,CAAC;AACzC,CAAC;AAFD,gDAEC;AAED,SAAgB,mBAAmB,CAAC,KAAmC;IACrE,kBAAK,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,KAAK,CAAC;AAC1C,CAAC;AAFD,kDAEC","sourcesContent":["import { OptionsOfUnknownResponseBody } from 'got';\n\nimport Clerk from './instance';\n\nconst singletonInstance = Clerk.getInstance();\nconst allowlistIdentifiers = singletonInstance.allowlistIdentifiers;\nconst clients = singletonInstance.clients;\nconst emails = singletonInstance.emails;\nconst invitations = singletonInstance.invitations;\nconst sessions = singletonInstance.sessions;\nconst smsMessages = singletonInstance.smsMessages;\nconst users = singletonInstance.users;\n\n// Export a default singleton instance that should suffice for most use cases\nexport default singletonInstance;\n\n// Export sub-api objects\nexport {\n  allowlistIdentifiers,\n  clients,\n  emails,\n  invitations,\n  sessions,\n  smsMessages,\n  users,\n};\n\n// Export resources\nexport {\n  Nullable,\n  AllowlistIdentifier,\n  Client,\n  Email,\n  EmailAddress,\n  ExternalAccount,\n  IdentificationLink,\n  Invitation,\n  PhoneNumber,\n  Session,\n  SMSMessage,\n  User,\n  Verification,\n} from './instance';\n\n// Export middleware functions\nconst ClerkExpressWithSession =\n  singletonInstance.expressWithSession.bind(singletonInstance);\nconst ClerkExpressRequireSession =\n  singletonInstance.expressRequireSession.bind(singletonInstance);\nconst withSession = singletonInstance.withSession.bind(singletonInstance);\nconst requireSession = singletonInstance.requireSession.bind(singletonInstance);\nexport {\n  ClerkExpressWithSession,\n  ClerkExpressRequireSession,\n  withSession,\n  requireSession,\n};\n\n// Export wrapper types for Next.js requests\nexport {\n  WithSessionProp,\n  RequireSessionProp,\n  WithSessionClaimsProp,\n  RequireSessionClaimsProp,\n} from './instance';\n\n// Export Errors\nexport {\n  HttpError,\n  ClerkServerError,\n  ClerkServerErrorJSON,\n} from './utils/Errors';\n\n// Export Logger\nexport { default as Logger } from './utils/Logger';\n\n// Export setters for the default singleton instance\n// Useful if you only have access to a sub-api instance\n\nexport function setClerkApiKey(value: string) {\n  Clerk.getInstance().apiKey = value;\n}\n\nexport function setClerkServerApiUrl(value: string) {\n  Clerk.getInstance().serverApiUrl = value;\n}\n\nexport function setClerkApiVersion(value: string) {\n  Clerk.getInstance().apiVersion = value;\n}\n\nexport function setClerkHttpOptions(value: OptionsOfUnknownResponseBody) {\n  Clerk.getInstance().httpOptions = value;\n}\n"]}