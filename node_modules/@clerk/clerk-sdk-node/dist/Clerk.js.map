{"version":3,"file":"Clerk.js","sourceRoot":"","sources":["../src/Clerk.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AuthStatus,\n  Base,\n  ClerkBackendAPI,\n  ClerkFetcher,\n  Session,\n} from '@clerk/backend-core';\nimport Cookies from 'cookies';\nimport deepmerge from 'deepmerge';\nimport type { NextFunction, Request, Response } from 'express';\nimport got, { OptionsOfUnknownResponseBody } from 'got';\nimport jwt, { JwtPayload } from 'jsonwebtoken';\nimport jwks, { JwksClient } from 'jwks-rsa';\nimport querystring from 'querystring';\n\nimport { SupportMessages } from './constants/SupportMessages';\nimport { LIB_NAME, LIB_VERSION } from './info';\nimport { ClerkServerError } from './utils/Errors';\n// utils\nimport Logger from './utils/Logger';\n\nconst defaultApiKey = process.env.CLERK_API_KEY || '';\nconst defaultApiVersion = process.env.CLERK_API_VERSION || 'v1';\nconst defaultServerApiUrl =\n  process.env.CLERK_API_URL || 'https://api.clerk.dev';\nconst JWKS_MAX_AGE = 3600000; // 1 hour\nconst packageRepo = 'https://github.com/clerkinc/clerk-sdk-node';\n\nexport type MiddlewareOptions = {\n  onError?: Function;\n  authorizedParties?: string[];\n};\n\nexport type WithSessionProp<T> = T & { session?: Session };\nexport type RequireSessionProp<T> = T & { session: Session };\nexport type WithSessionClaimsProp<T> = T & { sessionClaims?: JwtPayload };\nexport type RequireSessionClaimsProp<T> = T & { sessionClaims: JwtPayload };\n\nimport { Crypto, CryptoKey } from '@peculiar/webcrypto';\n\nimport { decodeBase64, toSPKIDer } from './utils/crypto';\n\nconst crypto = new Crypto();\n\nconst importKey = async (jwk: JsonWebKey, algorithm: Algorithm) => {\n  return await crypto.subtle.importKey('jwk', jwk, algorithm, true, ['verify']);\n};\n\nconst verifySignature = async (\n  algorithm: Algorithm,\n  key: CryptoKey,\n  signature: Uint8Array,\n  data: Uint8Array\n) => {\n  return await crypto.subtle.verify(algorithm, key, signature, data);\n};\n\nexport default class Clerk extends ClerkBackendAPI {\n  base: Base;\n  httpOptions: OptionsOfUnknownResponseBody;\n\n  _jwksClient: JwksClient;\n\n  // singleton instance\n  static _instance: Clerk;\n\n  constructor({\n    apiKey = defaultApiKey,\n    serverApiUrl = defaultServerApiUrl,\n    apiVersion = defaultApiVersion,\n    httpOptions = {},\n    jwksCacheMaxAge = JWKS_MAX_AGE,\n  }: {\n    apiKey?: string;\n    serverApiUrl?: string;\n    apiVersion?: string;\n    httpOptions?: OptionsOfUnknownResponseBody;\n    jwksCacheMaxAge?: number;\n  } = {}) {\n    const fetcher: ClerkFetcher = (\n      url,\n      { method, authorization, contentType, userAgent, body }\n    ) => {\n      const finalHTTPOptions = deepmerge(this.httpOptions, {\n        method,\n        responseType: contentType === 'text/html' ? 'text' : 'json',\n        headers: {\n          authorization,\n          'Content-Type': contentType,\n          'User-Agent': userAgent,\n          'X-Clerk-SDK': `node/${LIB_VERSION}`,\n        },\n        // @ts-ignore\n        ...(body && { body: querystring.stringify(body) }),\n      }) as OptionsOfUnknownResponseBody;\n\n      return got(url, finalHTTPOptions).then((data) => data.body);\n    };\n\n    super({\n      apiKey: defaultApiKey,\n      apiVersion: defaultApiVersion,\n      serverApiUrl: defaultServerApiUrl,\n      libName: LIB_NAME,\n      libVersion: LIB_VERSION,\n      packageRepo,\n      fetcher,\n    });\n\n    if (!apiKey) {\n      throw Error(SupportMessages.API_KEY_NOT_FOUND);\n    }\n\n    this.httpOptions = httpOptions;\n\n    this._jwksClient = jwks({\n      jwksUri: `${serverApiUrl}/${apiVersion}/jwks`,\n      requestHeaders: {\n        Authorization: `Bearer ${defaultApiKey}`,\n      },\n      timeout: 5000,\n      cache: true,\n      cacheMaxAge: jwksCacheMaxAge,\n    });\n\n    const loadCryptoKey = async (token: string) => {\n      const decoded = jwt.decode(token, { complete: true });\n      if (!decoded) {\n        throw new Error(`Failed to decode token: ${token}`);\n      }\n\n      const signingKey = await this._jwksClient.getSigningKey(\n        decoded.header.kid\n      );\n      const pubKey = signingKey.getPublicKey();\n\n      return await crypto.subtle.importKey(\n        'spki',\n        toSPKIDer(pubKey),\n        {\n          name: 'RSASSA-PKCS1-v1_5',\n          hash: 'SHA-256',\n        },\n        true,\n        ['verify']\n      );\n    };\n\n    /** Base initialization */\n\n    this.base = new Base(\n      importKey,\n      verifySignature,\n      decodeBase64,\n      loadCryptoKey\n    );\n  }\n\n  async verifyToken(token: string, authorizedParties?: string[]): Promise<JwtPayload> {\n    const decoded = jwt.decode(token, { complete: true });\n    if (!decoded) {\n      throw new Error(`Failed to verify token: ${token}`);\n    }\n\n    const key = await this._jwksClient.getSigningKey(decoded.header.kid);\n    const verified = jwt.verify(token, key.getPublicKey(), {\n      algorithms: ['RS256'],\n    });\n\n    if (typeof verified === 'string' || !verified.iss) {\n      throw new Error('Malformed token');\n    }\n\n    if (!verified.iss || !verified.iss.startsWith('https://clerk')) {\n      throw new Error(`Issuer is invalid: ${verified.iss}`);\n    }\n\n    if (verified.azp && authorizedParties && authorizedParties.length > 0) {\n      if (!authorizedParties.includes(verified.azp as string)) {\n        throw new Error(`Authorized party is invalid: ${verified.azp}`);\n      }\n    }\n\n    return verified;\n  }\n\n  // For use as singleton, always returns the same instance\n  static getInstance(): Clerk {\n    if (!this._instance) {\n      this._instance = new Clerk();\n    }\n\n    return this._instance;\n  }\n\n  // Middlewares\n\n  // defaultOnError swallows the error\n  defaultOnError(error: Error & { data: any }) {\n    Logger.warn(error.message);\n\n    (error.data || []).forEach((serverError: ClerkServerError) => {\n      Logger.warn(serverError.longMessage);\n    });\n  }\n\n  // strictOnError returns the error so that Express will halt the request chain\n  strictOnError(error: Error & { data: any }) {\n    Logger.error(error.message);\n\n    (error.data || []).forEach((serverError: ClerkServerError) => {\n      Logger.error(serverError.longMessage);\n    });\n\n    return error;\n  }\n\n  expressWithSession(\n    { onError, authorizedParties }: MiddlewareOptions = { onError: this.defaultOnError }\n  ): (req: Request, res: Response, next: NextFunction) => Promise<void> {\n    function signedOut() {\n      throw new Error('Unauthenticated');\n    }\n\n    async function authenticate(\n      this: Clerk,\n      req: Request,\n      res: Response,\n      next: NextFunction\n    ): Promise<any> {\n      const cookies = new Cookies(req, res);\n\n      try {\n        const { status, session, interstitial, sessionClaims } =\n          await this.base.getAuthState({\n            cookieToken: cookies.get('__session') as string,\n            clientUat: cookies.get('__client_uat') as string,\n            headerToken: req.headers.authorization?.replace('Bearer ', ''),\n            origin: req.headers.origin,\n            host: req.headers.host as string,\n            forwardedPort: req.headers['x-forwarded-port'] as string,\n            forwardedHost: req.headers['x-forwarded-host'] as string,\n            referrer: req.headers.referer,\n            userAgent: req.headers['user-agent'] as string,\n            authorizedParties: authorizedParties,\n            fetchInterstitial: () => this.fetchInterstitial(),\n          });\n\n        if (status === AuthStatus.SignedOut) {\n          return signedOut();\n        }\n\n        if (status === AuthStatus.SignedIn) {\n          // @ts-ignore\n          req.session = session;\n          // @ts-ignore\n          req.sessionClaims = sessionClaims;\n          return next();\n        }\n\n        res.writeHead(401, { 'Content-Type': 'text/html' });\n        res.write(interstitial);\n        res.end();\n      } catch (error) {\n        // Session will not be set on request\n\n        // Call onError if provided\n        if (!onError) {\n          return next();\n        }\n\n        const err = await onError(error);\n\n        if (err) {\n          next(err);\n        } else {\n          next();\n        }\n      }\n    }\n\n    return authenticate.bind(this);\n  }\n\n  expressRequireSession(\n    { onError, authorizedParties }: MiddlewareOptions = { onError: this.strictOnError }\n  ) {\n    return this.expressWithSession({ onError, authorizedParties });\n  }\n\n  // Credits to https://nextjs.org/docs/api-routes/api-middlewares\n  // Helper method to wait for a middleware to execute before continuing\n  // And to throw an error when an error happens in a middleware\n  // @ts-ignore\n  private _runMiddleware(req, res, fn) {\n    return new Promise((resolve, reject) => {\n      // @ts-ignore\n      fn(req, res, (result) => {\n        if (result instanceof Error) {\n          return reject(result);\n        }\n\n        return resolve(result);\n      });\n    });\n  }\n\n  // Set the session on the request and then call provided handler\n  withSession(\n    handler: Function,\n    { onError, authorizedParties }: MiddlewareOptions = { onError: this.defaultOnError }\n  ) {\n    return async (\n      req: WithSessionProp<Request> | WithSessionClaimsProp<Request>,\n      res: Response,\n      next?: NextFunction\n    ) => {\n      try {\n        await this._runMiddleware(\n          req,\n          res,\n          this.expressWithSession({ onError, authorizedParties })\n        );\n        return handler(req, res, next);\n      } catch (error) {\n        // @ts-ignore\n        const errorData = error.data || { error: error.message };\n        // @ts-ignore\n        res.statusCode = error.statusCode || 401;\n        /**\n         * Res.json is available in express-like environments.\n         * Res.send is available in express-like but also Fastify.\n         */\n        res.json ? res.json(errorData) : res.send(errorData);\n        res.end();\n      }\n    };\n  }\n\n  // Stricter version, short-circuits if session can't be determined\n  requireSession(\n    handler: Function,\n    { onError, authorizedParties }: MiddlewareOptions = { onError: this.strictOnError }\n  ) {\n    return this.withSession(handler, { onError, authorizedParties });\n  }\n}\n"]}