// TODO use EventEmitter for an async Logger instead
// TODO support more than just console output
var LogLevel;
(function (LogLevel) {
    LogLevel["Info"] = "INFO";
    LogLevel["Debug"] = "DEBUG";
    LogLevel["Warn"] = "WARN";
    LogLevel["Error"] = "ERROR";
})(LogLevel || (LogLevel = {}));
export default class Logger {
    static info(msg) {
        Logger.log(LogLevel.Info, msg);
    }
    static debug(msg) {
        Logger.log(LogLevel.Debug, msg);
    }
    static warn(msg) {
        Logger.log(LogLevel.Warn, msg);
    }
    static error(msg) {
        Logger.log(LogLevel.Error, msg);
    }
    static log(logLevel, msg) {
        if (process.env.CLERK_LOGGING == 'true') {
            const logMessage = {
                timestamp: new Date().toISOString(),
                level: logLevel,
                message: msg,
            };
            // @ts-ignore
            console[logLevel.toLowerCase()](logMessage);
        }
    }
}
//# sourceMappingURL=Logger.js.map