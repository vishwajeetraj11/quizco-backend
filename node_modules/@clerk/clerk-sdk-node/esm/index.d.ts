/// <reference types="qs" />
/// <reference types="express" />
import { OptionsOfUnknownResponseBody } from 'got';
import Clerk from './instance';
declare const singletonInstance: Clerk;
declare const allowlistIdentifiers: import("@clerk/backend-core/dist/cjs/api/collection").AllowlistIdentifierApi;
declare const clients: import("@clerk/backend-core/dist/cjs/api/collection").ClientApi;
declare const emails: import("@clerk/backend-core/dist/cjs/api/collection").EmailApi;
declare const invitations: import("@clerk/backend-core/dist/cjs/api/collection").InvitationApi;
declare const sessions: import("@clerk/backend-core/dist/cjs/api/collection").SessionApi;
declare const smsMessages: import("@clerk/backend-core/dist/cjs/api/collection").SMSMessageApi;
declare const users: import("@clerk/backend-core/dist/cjs/api/collection").UserApi;
export default singletonInstance;
export { allowlistIdentifiers, clients, emails, invitations, sessions, smsMessages, users, };
export { Nullable, AllowlistIdentifier, Client, Email, EmailAddress, ExternalAccount, IdentificationLink, Invitation, PhoneNumber, Session, SMSMessage, User, Verification, } from './instance';
declare const ClerkExpressWithSession: ({ onError, authorizedParties }?: import("./Clerk").MiddlewareOptions) => (req: import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: import("express").Response<any, Record<string, any>>, next: import("express").NextFunction) => Promise<void>;
declare const ClerkExpressRequireSession: ({ onError, authorizedParties }?: import("./Clerk").MiddlewareOptions) => (req: import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: import("express").Response<any, Record<string, any>>, next: import("express").NextFunction) => Promise<void>;
declare const withSession: (handler: Function, { onError, authorizedParties }?: import("./Clerk").MiddlewareOptions) => (req: import("./Clerk").WithSessionProp<import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>> | import("./Clerk").WithSessionClaimsProp<import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>>, res: import("express").Response<any, Record<string, any>>, next?: import("express").NextFunction | undefined) => Promise<any>;
declare const requireSession: (handler: Function, { onError, authorizedParties }?: import("./Clerk").MiddlewareOptions) => (req: import("./Clerk").WithSessionProp<import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>> | import("./Clerk").WithSessionClaimsProp<import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>>, res: import("express").Response<any, Record<string, any>>, next?: import("express").NextFunction | undefined) => Promise<any>;
export { ClerkExpressWithSession, ClerkExpressRequireSession, withSession, requireSession, };
export { WithSessionProp, RequireSessionProp, WithSessionClaimsProp, RequireSessionClaimsProp, } from './instance';
export { HttpError, ClerkServerError, ClerkServerErrorJSON, } from './utils/Errors';
export { default as Logger } from './utils/Logger';
export declare function setClerkApiKey(value: string): void;
export declare function setClerkServerApiUrl(value: string): void;
export declare function setClerkApiVersion(value: string): void;
export declare function setClerkHttpOptions(value: OptionsOfUnknownResponseBody): void;
//# sourceMappingURL=index.d.ts.map