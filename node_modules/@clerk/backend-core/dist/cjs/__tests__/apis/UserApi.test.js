"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const nock_1 = (0, tslib_1.__importDefault)(require("nock"));
const snakecase_keys_1 = (0, tslib_1.__importDefault)(require("snakecase-keys"));
const resources_1 = require("../../api/resources");
const TestBackendAPI_1 = require("../TestBackendAPI");
test('getUserList() returns a list of users', async () => {
    (0, nock_1.default)('https://api.clerk.dev')
        .get(new RegExp(/v1\/users?\?/))
        .replyWithFile(200, __dirname + '/responses/getUserList.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const userList = await TestBackendAPI_1.TestBackendAPIClient.users.getUserList();
    expect(userList).toBeInstanceOf(Array);
    expect(userList.length).toEqual(1);
    expect(userList[0]).toBeInstanceOf(resources_1.User);
});
test('getUserList() with limit returns a list of users', async () => {
    (0, nock_1.default)('https://api.clerk.dev')
        .get('/v1/users?limit=1')
        .replyWithFile(200, __dirname + '/responses/getUserList.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const userList = await TestBackendAPI_1.TestBackendAPIClient.users.getUserList({ limit: 1 });
    expect(userList).toBeInstanceOf(Array);
    expect(userList.length).toEqual(1);
    expect(userList[0]).toBeInstanceOf(resources_1.User);
});
test('getUserList() with limit and offset returns a list of users', async () => {
    (0, nock_1.default)('https://api.clerk.dev')
        .get('/v1/users?limit=1&offset=1')
        .replyWithFile(200, __dirname + '/responses/getUserList.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const userList = await TestBackendAPI_1.TestBackendAPIClient.users.getUserList({
        limit: 1,
        offset: 1,
    });
    expect(userList).toBeInstanceOf(Array);
    expect(userList.length).toEqual(1);
    expect(userList[0]).toBeInstanceOf(resources_1.User);
});
test('getUserList() with ordering returns a list of users', async () => {
    (0, nock_1.default)('https://api.clerk.dev')
        .get('/v1/users?order_by=%2Bupdated_at')
        .replyWithFile(200, __dirname + '/responses/getUserList.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const userList = await TestBackendAPI_1.TestBackendAPIClient.users.getUserList({
        orderBy: '+updated_at',
    });
    expect(userList).toBeInstanceOf(Array);
    expect(userList.length).toEqual(1);
    expect(userList[0]).toBeInstanceOf(resources_1.User);
});
test('getUserList() with emails returns a list of users', async () => {
    (0, nock_1.default)('https://api.clerk.dev')
        .get('/v1/users?email_address=email1&email_address=email2')
        .replyWithFile(200, __dirname + '/responses/getUserList.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const userList = await TestBackendAPI_1.TestBackendAPIClient.users.getUserList({
        emailAddress: ['email1', 'email2'],
    });
    expect(userList).toBeInstanceOf(Array);
    expect(userList.length).toEqual(1);
    expect(userList[0]).toBeInstanceOf(resources_1.User);
});
test('getUserList() with phone numbers returns a list of users', async () => {
    (0, nock_1.default)('https://api.clerk.dev')
        .get('/v1/users?phone_number=phone1&phone_number=phone2')
        .replyWithFile(200, __dirname + '/responses/getUserList.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const userList = await TestBackendAPI_1.TestBackendAPIClient.users.getUserList({
        phoneNumber: ['phone1', 'phone2'],
    });
    expect(userList).toBeInstanceOf(Array);
    expect(userList.length).toEqual(1);
    expect(userList[0]).toBeInstanceOf(resources_1.User);
});
test('getUser() returns a single user', async () => {
    (0, nock_1.default)('https://api.clerk.dev')
        .get(`/v1/users/user_deadbeef`)
        .replyWithFile(200, __dirname + '/responses/getUser.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const user = await TestBackendAPI_1.TestBackendAPIClient.users.getUser('user_deadbeef');
    expect(user).toBeInstanceOf(resources_1.User);
    expect(user.externalAccounts.length).toEqual(2);
    expect(user.externalAccounts[0].provider).toEqual('google');
    expect(user.externalAccounts[1].provider).toEqual('facebook');
    expect(user.web3Wallets.length).toEqual(1);
    expect(user.web3Wallets[0].web3Wallet).toEqual('0x0000000000000000000000000000000000000000');
    expect(user.web3Wallets[0].verification).toMatchObject({
        attempts: 1,
        expireAt: expect.any(Number),
        nonce: 'l6i2keszfr0yftb0aghwxye8xdxmec2x4m86elc5',
    });
    const expectedPublicMetadata = { zodiac_sign: 'leo', ascendant: 'scorpio' };
    expect(user.publicMetadata).toEqual(expectedPublicMetadata);
});
test('getUser() throws an error without user ID', async () => {
    await expect(TestBackendAPI_1.TestBackendAPIClient.users.getUser('')).rejects.toThrow('A valid ID is required.');
});
test('updateUser() throws an error without user ID', async () => {
    await expect(TestBackendAPI_1.TestBackendAPIClient.users.updateUser('', {})).rejects.toThrow('A valid ID is required.');
});
test('deleteUser() throws an error without user ID', async () => {
    await expect(TestBackendAPI_1.TestBackendAPIClient.users.deleteUser('')).rejects.toThrow('A valid ID is required.');
});
test('createUser() creates a user', async () => {
    const params = {
        emailAddress: ['boss@clerk.dev'],
        phoneNumber: ['+15555555555'],
        password: '123456',
        firstName: 'Boss',
        lastName: 'Clerk',
    };
    (0, nock_1.default)('https://api.clerk.dev')
        .post('/v1/users', (0, snakecase_keys_1.default)(params))
        .replyWithFile(200, __dirname + '/responses/createUser.json', {
        'Content-Type': '',
    });
    const user = await TestBackendAPI_1.TestBackendAPIClient.users.createUser(params);
    expect(user.firstName).toEqual('Boss');
});
