"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const nock_1 = (0, tslib_1.__importDefault)(require("nock"));
const resources_1 = require("../../api/resources");
const TestBackendAPI_1 = require("../TestBackendAPI");
test('getClientList() returns a list of clients', async () => {
    (0, nock_1.default)('https://api.clerk.dev')
        .get('/v1/clients')
        .replyWithFile(200, __dirname + '/responses/getClientList.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const clientList = await TestBackendAPI_1.TestBackendAPIClient.clients.getClientList();
    expect(clientList).toBeInstanceOf(Array);
    expect(clientList.length).toEqual(2);
    const expected1 = new resources_1.Client({
        id: 'client_isalwaysright',
        sessionIds: ['sess_swag'],
        sessions: [
            {
                id: 'sess_swag',
                clientId: 'client_isalwaysright',
                userId: 'user_player1',
                status: 'active',
                lastActiveAt: 1610706634,
                expireAt: 1630846634,
                abandonAt: 1630846634,
            },
        ],
        signInAttemptId: null,
        signUpAttemptId: null,
        lastActiveSessionId: 'sess_swag',
        createdAt: 1613593529,
        updatedAt: 1613593529,
    });
    const expected2 = new resources_1.Client({
        id: 'client_keysersoze',
        sessionIds: ['sess_mood'],
        sessions: [
            {
                id: 'sess_mood',
                clientId: 'client_keysersoze',
                userId: 'user_player2',
                status: 'active',
                lastActiveAt: 1610706634,
                expireAt: 1630846634,
                abandonAt: 1630846634,
            },
        ],
        signInAttemptId: 'sia_qwerty',
        signUpAttemptId: null,
        lastActiveSessionId: null,
        createdAt: 1612308722,
        updatedAt: 1612308722,
    });
    expect(clientList[0]).toEqual(expected1);
    expect(clientList[1]).toEqual(expected2);
});
test('getClient() returns a single client', async () => {
    const expected = new resources_1.Client({
        id: 'client_server',
        sessionIds: ['sess_onthebeach'],
        sessions: [
            {
                id: 'sess_onthebeach',
                clientId: 'client_server',
                userId: 'user_player1',
                status: 'active',
                lastActiveAt: 1610706634,
                expireAt: 1630846634,
                abandonAt: 1630846634,
            },
        ],
        signInAttemptId: 'sia_cheepthrills',
        signUpAttemptId: null,
        lastActiveSessionId: null,
        createdAt: 1610706634,
        updatedAt: 1610706634,
    });
    (0, nock_1.default)('https://api.clerk.dev')
        .get(`/v1/clients/${expected.id}`)
        .replyWithFile(200, __dirname + '/responses/getClient.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const client = await TestBackendAPI_1.TestBackendAPIClient.clients.getClient(expected.id);
    expect(client).toEqual(expected);
});
test('getClient() throws an error without client ID', async () => {
    await expect(TestBackendAPI_1.TestBackendAPIClient.clients.getClient('')).rejects.toThrow('A valid ID is required.');
});
test('verifyClient() returns a client if verified', async () => {
    const expected = new resources_1.Client({
        id: 'client_server',
        sessionIds: ['sess_onthebeach'],
        sessions: [
            {
                id: 'sess_onthebeach',
                clientId: 'client_server',
                userId: 'user_player1',
                status: 'active',
                lastActiveAt: 1610706634,
                expireAt: 1630846634,
                abandonAt: 1630846634,
            },
        ],
        signInAttemptId: 'sia_cheepthrills',
        signUpAttemptId: null,
        lastActiveSessionId: null,
        createdAt: 1610706634,
        updatedAt: 1610706634,
    });
    const sessionToken = 'random_jwt_token';
    (0, nock_1.default)('https://api.clerk.dev')
        .post(`/v1/clients/verify`, { token: sessionToken })
        .replyWithFile(200, __dirname + '/responses/getClient.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const client = await TestBackendAPI_1.TestBackendAPIClient.clients.verifyClient(sessionToken);
    expect(client).toEqual(expected);
});
