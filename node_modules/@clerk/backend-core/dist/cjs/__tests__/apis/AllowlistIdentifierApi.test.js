"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const nock_1 = (0, tslib_1.__importDefault)(require("nock"));
const resources_1 = require("../../api/resources");
const TestBackendAPI_1 = require("../TestBackendAPI");
test('getAllowlistIdentifierList() returns a list of allowlist identifiers', async () => {
    (0, nock_1.default)('https://api.clerk.dev')
        .get('/v1/allowlist_identifiers')
        .replyWithFile(200, __dirname + '/responses/getAllowlistIdentifierList.json', {});
    const allowlistIdentifierList = await TestBackendAPI_1.TestBackendAPIClient.allowlistIdentifiers.getAllowlistIdentifierList();
    expect(allowlistIdentifierList).toBeInstanceOf(Array);
    expect(allowlistIdentifierList.length).toEqual(1);
    expect(allowlistIdentifierList[0]).toBeInstanceOf(resources_1.AllowlistIdentifier);
});
test('createAllowlistIdentifier() creates an allowlist identifier', async () => {
    const identifier = 'test@example.com';
    const resJSON = {
        object: 'allowlist_identifier',
        id: 'alid_randomid',
        identifier,
        created_at: 1611948436,
        updated_at: 1611948436,
    };
    (0, nock_1.default)('https://api.clerk.dev')
        .post('/v1/allowlist_identifiers', JSON.stringify({
        identifier,
        notify: false,
    }))
        .reply(200, resJSON);
    const allowlistIdentifier = await TestBackendAPI_1.TestBackendAPIClient.allowlistIdentifiers.createAllowlistIdentifier({
        identifier,
        notify: false,
    });
    expect(allowlistIdentifier).toEqual(new resources_1.AllowlistIdentifier({
        id: resJSON.id,
        identifier,
        createdAt: resJSON.created_at,
        updatedAt: resJSON.updated_at,
    }));
});
test('deleteAllowlistIdentifier() deletes an allowlist identifier', async () => {
    const id = 'alid_randomid';
    const resJSON = {
        object: 'allowlist_identifier',
        id,
        identifier: 'test@example.com',
        created_at: 1611948436,
        updated_at: 1611948436,
    };
    (0, nock_1.default)('https://api.clerk.dev')
        .delete(`/v1/allowlist_identifiers/${id}`)
        .reply(200, resJSON);
    const allowlistIdentifier = await TestBackendAPI_1.TestBackendAPIClient.allowlistIdentifiers.deleteAllowlistIdentifier(id);
    expect(allowlistIdentifier).toEqual(new resources_1.AllowlistIdentifier({
        id,
        identifier: resJSON.identifier,
        createdAt: resJSON.created_at,
        updatedAt: resJSON.updated_at,
    }));
});
test('deleteAllowlistIdentifier() throws an error without allowlist identifier ID', async () => {
    await expect(TestBackendAPI_1.TestBackendAPIClient.allowlistIdentifiers.deleteAllowlistIdentifier('')).rejects.toThrow('A valid ID is required.');
});
