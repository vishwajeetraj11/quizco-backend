"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const nock_1 = (0, tslib_1.__importDefault)(require("nock"));
const resources_1 = require("../../api/resources");
const TestBackendAPI_1 = require("../TestBackendAPI");
test('getInvitationList() returns a list of invitations', async () => {
    (0, nock_1.default)('https://api.clerk.dev')
        .get('/v1/invitations')
        .replyWithFile(200, __dirname + '/responses/getInvitationList.json', {});
    const invitationList = await TestBackendAPI_1.TestBackendAPIClient.invitations.getInvitationList();
    expect(invitationList).toBeInstanceOf(Array);
    expect(invitationList.length).toEqual(1);
    expect(invitationList[0]).toBeInstanceOf(resources_1.Invitation);
});
test('createInvitation() creates an invitation', async () => {
    const emailAddress = 'test@example.com';
    const resJSON = {
        object: 'invitation',
        id: 'inv_randomid',
        email_address: emailAddress,
        created_at: 1611948436,
        updated_at: 1611948436,
    };
    (0, nock_1.default)('https://api.clerk.dev')
        .post('/v1/invitations', {
        email_address: emailAddress,
    })
        .reply(200, resJSON);
    const invitation = await TestBackendAPI_1.TestBackendAPIClient.invitations.createInvitation({
        emailAddress,
    });
    expect(invitation).toEqual(new resources_1.Invitation({
        id: resJSON.id,
        emailAddress,
        createdAt: resJSON.created_at,
        updatedAt: resJSON.updated_at,
    }));
});
test('createInvitation() accepts a redirectUrl', async () => {
    const emailAddress = 'test@example.com';
    const resJSON = {
        object: 'invitation',
        id: 'inv_randomid',
        email_address: emailAddress,
        created_at: 1611948436,
        updated_at: 1611948436,
    };
    const redirectUrl = 'http://redirect.org';
    (0, nock_1.default)('https://api.clerk.dev')
        .post('/v1/invitations', {
        email_address: emailAddress,
        redirect_url: redirectUrl,
    })
        .reply(200, resJSON);
    const invitation = await TestBackendAPI_1.TestBackendAPIClient.invitations.createInvitation({
        emailAddress,
        redirectUrl,
    });
    expect(invitation).toEqual(new resources_1.Invitation({
        id: resJSON.id,
        emailAddress,
        createdAt: resJSON.created_at,
        updatedAt: resJSON.updated_at,
    }));
});
test('revokeInvitation() revokes an invitation', async () => {
    const id = 'inv_randomid';
    const resJSON = {
        object: 'invitation',
        id,
        email_address: 'test@example.com',
        created_at: 1611948436,
        updated_at: 1611948436,
    };
    (0, nock_1.default)('https://api.clerk.dev')
        .post(`/v1/invitations/${id}/revoke`)
        .reply(200, resJSON);
    const invitation = await TestBackendAPI_1.TestBackendAPIClient.invitations.revokeInvitation(id);
    expect(invitation).toEqual(new resources_1.Invitation({
        id,
        emailAddress: resJSON.email_address,
        createdAt: resJSON.created_at,
        updatedAt: resJSON.updated_at,
    }));
});
test('revokeInvitation() throws an error without invitation ID', async () => {
    await expect(TestBackendAPI_1.TestBackendAPIClient.invitations.revokeInvitation('')).rejects.toThrow('A valid ID is required.');
});
