"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const nock_1 = (0, tslib_1.__importDefault)(require("nock"));
const resources_1 = require("../../api/resources");
const TestBackendAPI_1 = require("../TestBackendAPI");
test('getSessionList() returns a list of sessions', async () => {
    (0, nock_1.default)('https://api.clerk.dev')
        .get('/v1/sessions')
        .replyWithFile(200, __dirname + '/responses/getSessionList.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const sessionList = await TestBackendAPI_1.TestBackendAPIClient.sessions.getSessionList();
    expect(sessionList).toBeInstanceOf(Array);
    expect(sessionList.length).toEqual(2);
    const expected1 = new resources_1.Session({
        id: 'sess_foobar',
        clientId: 'client_yolo',
        userId: 'user_babyyoda',
        status: 'expired',
        lastActiveAt: 1611595758,
        expireAt: 1612200558,
        abandonAt: 1614187758,
    });
    const expected2 = new resources_1.Session({
        id: 'sess_snafu',
        clientId: 'client_fomo',
        userId: 'user_mandalorian',
        status: 'abandoned',
        lastActiveAt: 1611069720,
        expireAt: 1611311546,
        abandonAt: 1613298746,
    });
    expect(sessionList[0]).toEqual(expected1);
    expect(sessionList[1]).toEqual(expected2);
});
test('getSession() returns a single session', async () => {
    const expected = new resources_1.Session({
        id: 'sess_oops',
        clientId: 'client_isalwayswrong',
        userId: 'user_player1',
        status: 'active',
        lastActiveAt: 1613593533,
        expireAt: 1614198333,
        abandonAt: 1616185533,
    });
    (0, nock_1.default)('https://api.clerk.dev')
        .get(`/v1/sessions/${expected.id}`)
        .replyWithFile(200, __dirname + '/responses/getSession.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const session = await TestBackendAPI_1.TestBackendAPIClient.sessions.getSession(expected.id);
    expect(session).toEqual(expected);
});
test('getSession() throws an error without session ID', async () => {
    await expect(TestBackendAPI_1.TestBackendAPIClient.sessions.getSession('')).rejects.toThrow('A valid ID is required.');
});
test('revokeSession() throws an error without session ID', async () => {
    await expect(TestBackendAPI_1.TestBackendAPIClient.sessions.revokeSession('')).rejects.toThrow('A valid ID is required.');
});
test('verifySession() returns a session if verified', async () => {
    const expected = new resources_1.Session({
        id: 'sess_oops',
        clientId: 'client_isalwayswrong',
        userId: 'user_player1',
        status: 'active',
        lastActiveAt: 1613593533,
        expireAt: 1614198333,
        abandonAt: 1616185533,
    });
    const sessionToken = 'random_jwt_token';
    (0, nock_1.default)('https://api.clerk.dev')
        .post(`/v1/sessions/${expected.id}/verify`, { token: sessionToken })
        .replyWithFile(200, __dirname + '/responses/getSession.json', {
        'Content-Type': 'application/x-www-form-urlencoded',
    });
    const session = await TestBackendAPI_1.TestBackendAPIClient.sessions.verifySession(expected.id, sessionToken);
    expect(session).toEqual(expected);
});
test('verifySession() throws an error without session ID', async () => {
    await expect(TestBackendAPI_1.TestBackendAPIClient.sessions.verifySession('', '')).rejects.toThrow('A valid ID is required.');
});
