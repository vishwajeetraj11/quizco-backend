"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.INTERSTITIAL_METHOD = void 0;
const tslib_1 = require("tslib");
const querystring = (0, tslib_1.__importStar)(require("query-string"));
const snakecase_keys_1 = (0, tslib_1.__importDefault)(require("snakecase-keys"));
const Deserializer_1 = (0, tslib_1.__importDefault)(require("./Deserializer"));
const ErrorHandler_1 = (0, tslib_1.__importDefault)(require("./ErrorHandler"));
exports.INTERSTITIAL_METHOD = 'GET';
const SERVER_API_URL = 'https://api.clerk.dev';
const INTERSTITIAL_path = 'v1/internal/interstitial';
const INTERSTITIAL_URL = `${SERVER_API_URL}/${INTERSTITIAL_path}`;
const API_CONTENT_TYPE = 'application/x-www-form-urlencoded';
class RestClient {
    constructor(apiKey, serverApiUrl, apiVersion, fetcher, libName, libVersion, packageRepo) {
        this.apiKey = apiKey;
        this.serverApiUrl = serverApiUrl;
        this.apiVersion = apiVersion;
        this.fetcher = fetcher;
        this.userAgent = `${libName}/${libVersion} (${packageRepo})`;
    }
    makeRequest(requestOptions) {
        let url = `${this.serverApiUrl}/${this.apiVersion}${requestOptions.path}`;
        if (requestOptions.queryParams) {
            url = `${url}?${querystring.stringify((0, snakecase_keys_1.default)(requestOptions.queryParams))}`;
        }
        let body;
        if (requestOptions.bodyParams) {
            body = (0, snakecase_keys_1.default)(requestOptions.bodyParams);
        }
        return this.fetcher(url, {
            method: requestOptions.method,
            authorization: `Bearer ${this.apiKey}`,
            contentType: API_CONTENT_TYPE,
            userAgent: this.userAgent,
            body,
        })
            .then((responseData) => (0, Deserializer_1.default)(responseData))
            .catch((error) => (0, ErrorHandler_1.default)(error));
    }
    fetchInterstitial() {
        return this.fetcher(INTERSTITIAL_URL, {
            method: exports.INTERSTITIAL_METHOD,
            authorization: `Bearer ${this.apiKey}`,
            contentType: 'text/html',
            userAgent: this.userAgent,
        }).catch((error) => (0, ErrorHandler_1.default)(error));
    }
}
exports.default = RestClient;
