"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const tslib_1 = require("tslib");
const camelcase_keys_1 = (0, tslib_1.__importDefault)(require("camelcase-keys"));
const Associations_1 = (0, tslib_1.__importDefault)(require("../utils/Associations"));
const Filter_1 = (0, tslib_1.__importDefault)(require("../utils/Filter"));
const EmailAddress_1 = require("./EmailAddress");
const Enums_1 = require("./Enums");
const ExternalAccount_1 = require("./ExternalAccount");
const PhoneNumber_1 = require("./PhoneNumber");
const Web3Wallet_1 = require("./Web3Wallet");
class User {
    constructor(data = {}) {
        Object.assign(this, User.defaults, data);
    }
    static fromJSON(data) {
        const obj = {};
        const camelcased = (0, camelcase_keys_1.default)(data);
        const filtered = (0, Filter_1.default)(camelcased, User.attributes);
        Object.assign(obj, filtered);
        obj.emailAddresses = (data.email_addresses || []).map((x) => EmailAddress_1.EmailAddress.fromJSON(x));
        obj.phoneNumbers = (data.phone_numbers || []).map((x) => PhoneNumber_1.PhoneNumber.fromJSON(x));
        obj.web3Wallets = (data.web3_wallets || []).map((x) => Web3Wallet_1.Web3Wallet.fromJSON(x));
        obj.externalAccounts = (data.external_accounts || []).map((x) => ExternalAccount_1.ExternalAccount.fromJSON(x));
        return new User(obj);
    }
}
exports.User = User;
User.attributes = [
    'id',
    'username',
    'firstName',
    'lastName',
    'gender',
    'birthday',
    'profileImageUrl',
    'primaryEmailAddressId',
    'primaryEmailAddressId',
    'primaryPhoneNumberId',
    'primaryWeb3WalletId',
    'passwordEnabled',
    'twoFactorEnabled',
    'passwordEnabled',
    'passwordEnabled',
    'passwordEnabled',
    'twoFactorEnabled',
    'publicMetadata',
    'privateMetadata',
    'unsafeMetadata',
    'createdAt',
    'updatedAt',
];
User.associations = {
    emailAddresses: Enums_1.Association.HasMany,
    phoneNumbers: Enums_1.Association.HasMany,
    web3Wallets: Enums_1.Association.HasMany,
    externalAccounts: Enums_1.Association.HasMany,
};
User.defaults = {
    publicMetadata: {},
    privateMetadata: {},
    unsafeMetadata: {},
    ...(0, Associations_1.default)(User.associations),
};
