"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserApi = void 0;
const AbstractApi_1 = require("./AbstractApi");
const userMetadataKeys = [
    'publicMetadata',
    'privateMetadata',
    'unsafeMetadata',
];
class UserApi extends AbstractApi_1.AbstractApi {
    async getUserList(params = {}) {
        return this._restClient.makeRequest({
            method: 'GET',
            path: '/users',
            queryParams: params,
        });
    }
    async getUser(userId) {
        this.requireId(userId);
        return this._restClient.makeRequest({
            method: 'GET',
            path: `/users/${userId}`,
        });
    }
    async createUser(params) {
        const { publicMetadata, privateMetadata, unsafeMetadata } = params;
        return this._restClient.makeRequest({
            method: 'POST',
            path: '/users',
            bodyParams: {
                ...params,
                ...sanitizeMetadataParams({
                    publicMetadata,
                    privateMetadata,
                    unsafeMetadata,
                }),
            },
        });
    }
    async updateUser(userId, params = {}) {
        this.requireId(userId);
        if (params.publicMetadata && !(typeof params.publicMetadata == 'string')) {
            params.publicMetadata = JSON.stringify(params.publicMetadata);
        }
        if (params.privateMetadata &&
            !(typeof params.privateMetadata == 'string')) {
            params.privateMetadata = JSON.stringify(params.privateMetadata);
        }
        return this._restClient.makeRequest({
            method: 'PATCH',
            path: `/users/${userId}`,
            bodyParams: params,
        });
    }
    async deleteUser(userId) {
        this.requireId(userId);
        return this._restClient.makeRequest({
            method: 'DELETE',
            path: `/users/${userId}`,
        });
    }
}
exports.UserApi = UserApi;
function sanitizeMetadataParams(params) {
    return userMetadataKeys.reduce((res, key) => {
        if (params[key]) {
            res[key] = JSON.stringify(params[key]);
        }
        return res;
    }, {});
}
