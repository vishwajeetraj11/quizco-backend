import camelcaseKeys from 'camelcase-keys';
import associationDefaults from '../utils/Associations';
import filterKeys from '../utils/Filter';
import { Association } from './Enums';
import { Session } from './Session';
export class Client {
    constructor(data = {}) {
        Object.assign(this, Client.defaults, data);
    }
    static fromJSON(data) {
        const obj = {};
        const camelcased = camelcaseKeys(data);
        const filtered = filterKeys(camelcased, Client.attributes);
        Object.assign(obj, filtered);
        obj.sessions = (data.sessions || []).map((x) => Session.fromJSON(x));
        return new Client(obj);
    }
}
Client.attributes = [
    'id',
    'sessionIds',
    'signUpAttemptId',
    'signInAttemptId',
    'lastActiveSessionId',
    'createdAt',
    'updatedAt',
];
Client.associations = {
    sessions: Association.HasMany,
};
Client.defaults = {
    ...associationDefaults(Client.associations),
};
