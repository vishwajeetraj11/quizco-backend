import camelcaseKeys from 'camelcase-keys';
import associationDefaults from '../utils/Associations';
import filterKeys from '../utils/Filter';
import { EmailAddress } from './EmailAddress';
import { Association } from './Enums';
import { ExternalAccount } from './ExternalAccount';
import { PhoneNumber } from './PhoneNumber';
import { Web3Wallet } from './Web3Wallet';
export class User {
    constructor(data = {}) {
        Object.assign(this, User.defaults, data);
    }
    static fromJSON(data) {
        const obj = {};
        const camelcased = camelcaseKeys(data);
        const filtered = filterKeys(camelcased, User.attributes);
        Object.assign(obj, filtered);
        obj.emailAddresses = (data.email_addresses || []).map((x) => EmailAddress.fromJSON(x));
        obj.phoneNumbers = (data.phone_numbers || []).map((x) => PhoneNumber.fromJSON(x));
        obj.web3Wallets = (data.web3_wallets || []).map((x) => Web3Wallet.fromJSON(x));
        obj.externalAccounts = (data.external_accounts || []).map((x) => ExternalAccount.fromJSON(x));
        return new User(obj);
    }
}
User.attributes = [
    'id',
    'username',
    'firstName',
    'lastName',
    'gender',
    'birthday',
    'profileImageUrl',
    'primaryEmailAddressId',
    'primaryEmailAddressId',
    'primaryPhoneNumberId',
    'primaryWeb3WalletId',
    'passwordEnabled',
    'twoFactorEnabled',
    'passwordEnabled',
    'passwordEnabled',
    'passwordEnabled',
    'twoFactorEnabled',
    'publicMetadata',
    'privateMetadata',
    'unsafeMetadata',
    'createdAt',
    'updatedAt',
];
User.associations = {
    emailAddresses: Association.HasMany,
    phoneNumbers: Association.HasMany,
    web3Wallets: Association.HasMany,
    externalAccounts: Association.HasMany,
};
User.defaults = {
    publicMetadata: {},
    privateMetadata: {},
    unsafeMetadata: {},
    ...associationDefaults(User.associations),
};
