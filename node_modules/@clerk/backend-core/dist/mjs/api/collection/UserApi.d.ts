import { User } from '../resources/User';
import { AbstractApi } from './AbstractApi';
interface UserParams {
    firstName?: string;
    lastName?: string;
    password?: string;
    primaryEmailAddressID?: string;
    primaryPhoneNumberID?: string;
    publicMetadata?: Record<string, unknown> | string;
    privateMetadata?: Record<string, unknown> | string;
}
interface UserListParams {
    limit?: number;
    offset?: number;
    emailAddress?: string[];
    phoneNumber?: string[];
    userId?: string[];
    orderBy?: 'created_at' | 'updated_at' | '+created_at' | '+updated_at' | '-created_at' | '-updated_at';
}
declare type UserMetadataParams = {
    publicMetadata?: Record<string, unknown>;
    privateMetadata?: Record<string, unknown>;
    unsafeMetadata?: Record<string, unknown>;
};
declare type CreateUserParams = {
    externalId?: string;
    emailAddress?: string[];
    phoneNumber?: string[];
    username?: string;
    password?: string;
    firstName?: string;
    lastName?: string;
    skipPasswordChecks?: boolean;
} & UserMetadataParams;
export declare class UserApi extends AbstractApi {
    getUserList(params?: UserListParams): Promise<User[]>;
    getUser(userId: string): Promise<User>;
    createUser(params: CreateUserParams): Promise<User>;
    updateUser(userId: string, params?: UserParams): Promise<User>;
    deleteUser(userId: string): Promise<User>;
}
export {};
//# sourceMappingURL=UserApi.d.ts.map