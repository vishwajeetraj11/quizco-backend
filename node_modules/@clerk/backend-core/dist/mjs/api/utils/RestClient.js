import * as querystring from 'query-string';
import snakecaseKeys from 'snakecase-keys';
import deserialize from './Deserializer';
import handleError from './ErrorHandler';
export const INTERSTITIAL_METHOD = 'GET';
const SERVER_API_URL = 'https://api.clerk.dev';
const INTERSTITIAL_path = 'v1/internal/interstitial';
const INTERSTITIAL_URL = `${SERVER_API_URL}/${INTERSTITIAL_path}`;
const API_CONTENT_TYPE = 'application/x-www-form-urlencoded';
export default class RestClient {
    constructor(apiKey, serverApiUrl, apiVersion, fetcher, libName, libVersion, packageRepo) {
        this.apiKey = apiKey;
        this.serverApiUrl = serverApiUrl;
        this.apiVersion = apiVersion;
        this.fetcher = fetcher;
        this.userAgent = `${libName}/${libVersion} (${packageRepo})`;
    }
    makeRequest(requestOptions) {
        let url = `${this.serverApiUrl}/${this.apiVersion}${requestOptions.path}`;
        if (requestOptions.queryParams) {
            url = `${url}?${querystring.stringify(snakecaseKeys(requestOptions.queryParams))}`;
        }
        let body;
        if (requestOptions.bodyParams) {
            body = snakecaseKeys(requestOptions.bodyParams);
        }
        return this.fetcher(url, {
            method: requestOptions.method,
            authorization: `Bearer ${this.apiKey}`,
            contentType: API_CONTENT_TYPE,
            userAgent: this.userAgent,
            body,
        })
            .then((responseData) => deserialize(responseData))
            .catch((error) => handleError(error));
    }
    fetchInterstitial() {
        return this.fetcher(INTERSTITIAL_URL, {
            method: INTERSTITIAL_METHOD,
            authorization: `Bearer ${this.apiKey}`,
            contentType: 'text/html',
            userAgent: this.userAgent,
        }).catch((error) => handleError(error));
    }
}
