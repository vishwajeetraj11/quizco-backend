export declare const INTERSTITIAL_METHOD = "GET";
declare type RequestOptions = {
    method: 'GET' | 'POST' | 'PATCH' | 'DELETE' | 'PUT';
    path: string;
    queryParams?: object;
    bodyParams?: object;
};
export declare type ClerkFetcher = (url: string, options: {
    method: 'GET' | 'POST' | 'PATCH' | 'DELETE' | 'PUT';
    authorization: string;
    contentType: string;
    userAgent: string;
    body?: Record<string, unknown>;
}) => Promise<unknown>;
export default class RestClient {
    apiKey: string;
    serverApiUrl: string;
    apiVersion: string;
    fetcher: ClerkFetcher;
    userAgent: string;
    constructor(apiKey: string, serverApiUrl: string, apiVersion: string, fetcher: ClerkFetcher, libName: string, libVersion: string, packageRepo: string);
    makeRequest<T>(requestOptions: RequestOptions): Promise<T>;
    fetchInterstitial<T>(): Promise<T>;
}
export {};
//# sourceMappingURL=RestClient.d.ts.map