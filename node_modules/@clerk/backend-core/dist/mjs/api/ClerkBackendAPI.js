import { AllowlistIdentifierApi, ClientApi, EmailApi, InvitationApi, SessionApi, SMSMessageApi, UserApi, } from './collection';
import RestClient from './utils/RestClient';
const defaultApiKey = process.env.CLERK_API_KEY || '';
const defaultApiVersion = process.env.CLERK_API_VERSION || 'v1';
const defaultServerApiUrl = process.env.CLERK_API_URL || 'https://api.clerk.dev';
export class ClerkBackendAPI {
    constructor({ apiKey = defaultApiKey, serverApiUrl = defaultServerApiUrl, apiVersion = defaultApiVersion, fetcher, libName, libVersion, packageRepo, }) {
        this._restClient = new RestClient(apiKey, serverApiUrl, apiVersion, fetcher, libName, libVersion, packageRepo);
    }
    fetchInterstitial() {
        return this._restClient.fetchInterstitial();
    }
    set apiKey(value) {
        this._restClient.apiKey = value;
    }
    set serverApiUrl(value) {
        this._restClient.serverApiUrl = value;
    }
    set apiVersion(value) {
        this._restClient.apiVersion = value;
    }
    get allowlistIdentifiers() {
        if (!this._allowlistIdentifierApi) {
            this._allowlistIdentifierApi = new AllowlistIdentifierApi(this._restClient);
        }
        return this._allowlistIdentifierApi;
    }
    get clients() {
        if (!this._clientApi) {
            this._clientApi = new ClientApi(this._restClient);
        }
        return this._clientApi;
    }
    get emails() {
        if (!this._emailApi) {
            this._emailApi = new EmailApi(this._restClient);
        }
        return this._emailApi;
    }
    get invitations() {
        if (!this._invitationApi) {
            this._invitationApi = new InvitationApi(this._restClient);
        }
        return this._invitationApi;
    }
    get sessions() {
        if (!this._sessionApi) {
            this._sessionApi = new SessionApi(this._restClient);
        }
        return this._sessionApi;
    }
    get smsMessages() {
        if (!this._smsMessageApi) {
            this._smsMessageApi = new SMSMessageApi(this._restClient);
        }
        return this._smsMessageApi;
    }
    get users() {
        if (!this._userApi) {
            this._userApi = new UserApi(this._restClient);
        }
        return this._userApi;
    }
}
