import type { CryptoKey as PeculiarCryptoKey } from '@peculiar/webcrypto';
import { JWT, JWTPayload } from './util/types';
export declare const API_KEY: string;
declare type ImportKeyFunction = (...args: any[]) => Promise<CryptoKey | PeculiarCryptoKey>;
declare type LoadCryptoKeyFunction = (token: string) => Promise<CryptoKey>;
declare type DecodeBase64Function = (base64Encoded: string) => string;
declare type VerifySignatureFunction = (...args: any[]) => Promise<boolean>;
export declare enum AuthStatus {
    SignedIn = "Signed in",
    SignedOut = "Signed out",
    Interstitial = "Interstitial"
}
export declare type Session = {
    id?: string;
    userId?: string;
};
export declare type VerifySessionTokenOptions = {
    authorizedParties?: string[];
};
declare type AuthState = {
    status: AuthStatus;
    session?: Session;
    interstitial?: string;
    sessionClaims?: JWTPayload;
};
declare type AuthStateParams = {
    cookieToken?: string;
    clientUat?: string;
    headerToken?: string | null;
    origin?: string | null;
    host: string;
    forwardedHost?: string | null;
    forwardedPort?: string | null;
    referrer?: string | null;
    userAgent?: string | null;
    authorizedParties?: string[];
    fetchInterstitial: () => Promise<string>;
};
export declare class Base {
    importKeyFunction: ImportKeyFunction;
    verifySignatureFunction: VerifySignatureFunction;
    decodeBase64Function: DecodeBase64Function;
    loadCryptoKeyFunction?: LoadCryptoKeyFunction;
    constructor(importKeyFunction: ImportKeyFunction, verifySignatureFunction: VerifySignatureFunction, decodeBase64Function: DecodeBase64Function, loadCryptoKeyFunction?: LoadCryptoKeyFunction);
    verifySessionToken: (token: string, { authorizedParties }?: VerifySessionTokenOptions) => Promise<JWTPayload>;
    loadCryptoKeyFromEnv: () => Promise<CryptoKey>;
    decodeJwt: (token: string) => JWT;
    verifyJwtSignature: (key: CryptoKey, token: string) => Promise<void>;
    verifyJwt: (key: CryptoKey, token: string) => Promise<JWTPayload>;
    getAuthState: ({ cookieToken, clientUat, headerToken, origin, host, forwardedHost, forwardedPort, referrer, userAgent, authorizedParties, fetchInterstitial, }: AuthStateParams) => Promise<AuthState>;
}
export {};
//# sourceMappingURL=Base.d.ts.map